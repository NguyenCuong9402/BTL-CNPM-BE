Description: Sam Template Demo
Parameters:
  AppName:
    Type: String
    Description: Name of app
    Default: SamTemplate
  BackendPort:
    Type: Number
    Description: Backend app port
    Default: 5012
  ContainerName:
    Type: String
    Description: Container name
    Default: "sam-template"
  RepositoryName:
    Type: String
    Description: Repository name
    Default: "sam-template"
  TargetGroupName:
    Type: String
    Description: Target group name
    Default: "ecs-sam-template"
  LoadBalancerName:
    Type: String
    Description: Load Balancer Name
    Default: "sam-template"
  HealthCheckPath:
    Type: String
    Description: Health Check Path
    Default: "/"
  RegionId:
    Type: String
    Description: Region id
    Default: "ap-southeast-1"
  ServiceName:
    Type: String
    Description: Service Name
    Default: "demo"
  NumberOfTask:
    Type: Number
    Description: The number of instantiations of the specified task definition to place and keep running on your cluster.
    Default: 0

Resources:
# Create VPC, subnets and config
  EC2VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/20
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: SamTemplate

  EC2Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EC2VPC
      CidrBlock: 10.0.0.0/22
      AvailabilityZone: "ap-southeast-1a"
      Tags:
        - Key: Name
          Value: SamTemplate1

  EC2Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EC2VPC
      CidrBlock: 10.0.4.0/22
      AvailabilityZone: "ap-southeast-1b"
      Tags:
        - Key: Name
          Value: SamTemplate2

  EC2Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EC2VPC
      CidrBlock: 10.0.8.0/22
      AvailabilityZone: "ap-southeast-1c"
      Tags:
        - Key: Name
          Value: SamTemplate3

  EC2InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SamTemplate

  EC2VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - EC2VPC
      - EC2InternetGateway
    Properties:
      VpcId: !Ref EC2VPC
      InternetGatewayId: !Ref EC2InternetGateway

  EC2RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - EC2VPC
    Properties:
      VpcId: !Ref EC2VPC
      Tags:
        - Key: Name
          Value: SamTemplate

  EC2Route:
    Type: AWS::EC2::Route
    DependsOn:
      - EC2VPCGatewayAttachment
      - EC2RouteTable
    Properties:
      RouteTableId: !Ref EC2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref EC2InternetGateway

# Create Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - EC2VPCGatewayAttachment
    Properties:
      GroupName: !Ref AppName
      GroupDescription: Security group of sam template created from cloudformation
      VpcId: !Ref EC2VPC
      Tags:
        - Key: Project
          Value: SamTemplate
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: "HTTP"
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          Description: "Backend Port"
          FromPort: !Ref BackendPort
          ToPort: !Ref BackendPort
          CidrIp: 0.0.0.0/0

# Create Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref RepositoryName
      Tags:
        - Key: Project
          Value: SamTemplate

# Create ECS and TaskDefinition
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AppName
      Tags:
        - Key: Project
          Value: SamTemplate

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ECRRepository
      - ECSCluster
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      TaskRoleArn: "CustomECSTaskExecutionRole"
      ExecutionRoleArn: "CustomECSTaskExecutionRole"
      Cpu: "256"
      Memory: "512"
      NetworkMode: "awsvpc"
      Tags:
        - Key: Project
          Value: SamTemplate
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Image: !GetAtt ECRRepository.RepositoryUri
          Cpu: 256
          Memory: 512
          PortMappings:
            - ContainerPort: !Ref BackendPort
              HostPort: !Ref BackendPort
              Protocol: "tcp"
          Environment:
            - Name: "ENV"
              Value: "stg"

# Create TargetGroup, LoadBalancer and Listener
  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroupName
      TargetType: "ip"
      Port: 80
      Protocol: "HTTP"
      ProtocolVersion: "HTTP1"
      VpcId: !Ref EC2VPC
      HealthCheckProtocol: "HTTP"
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: !Ref HealthCheckPath

  ELBLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - ELBTargetGroup
    Properties:
      Name: !Ref LoadBalancerName
      Type: "application"
      IpAddressType: "ipv4"
      Scheme: "internet-facing"
      SecurityGroups:
        - !Ref EC2SecurityGroup
      Subnets:
        - !Ref EC2Subnet1
        - !Ref EC2Subnet2

  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ELBTargetGroup
      - ELBLoadBalancer
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref ELBTargetGroup
      LoadBalancerArn: !Ref ELBLoadBalancer
      Port: 80
      Protocol: "HTTP"

# Create Services
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ECSTaskDefinition
      - ELBTargetGroup
      - ELBLoadBalancer
      - ELBListener
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Ref ServiceName
      DesiredCount: !Ref NumberOfTask
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: "FARGATE"
      Tags:
        - Key: Project
          Value: SamTemplate
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 10
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !Ref EC2SecurityGroup
          Subnets:
            - !Ref EC2Subnet1
            - !Ref EC2Subnet2
      LoadBalancers:
        - TargetGroupArn: !Ref ELBTargetGroup
          ContainerPort: !Ref BackendPort
          ContainerName: !Ref ContainerName

# Create Role
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: codebuild-sam-template-demo
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: CodeBuildBasePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketAcl"
                  - "s3:GetBucketLocation"
                Resource: '*'
              - Effect: Allow
                Action:
                  - "codebuild:CreateReportGroup"
                  - "codebuild:CreateReport"
                  - "codebuild:UpdateReport"
                  - "codebuild:BatchPutTestCases"
                  - "codebuild:BatchPutCodeCoverages"
                Resource: '*'
        - PolicyName: EC2ContainerRegistryFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:*"
                  - "cloudtrail:LookupEvents"
                Resource: '*'
              - Effect: Allow
                Action:
                  - "iam:CreateServiceLinkedRole"
                Resource: '*'
        - PolicyName: ECS_UpdateServices
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:*"
                Resource: '*'

# Create Code Build
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: SamTemplate
      Description: "Code build sam template demo"
      ServiceRole: !GetAtt ServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
      Source:
        Type: BITBUCKET
        Location: "https://chanlybootai@bitbucket.org/BootAI/sam-template.git"
        BuildSpec: "doc-build-ecs/buildspec.yml"
      SourceVersion: master
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PULL_REQUEST_MERGED